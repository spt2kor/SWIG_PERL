# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package INHRT;
use base qw(Exporter);
use base qw(DynaLoader);
package INHRTc;
bootstrap INHRT;
package INHRT;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package INHRT;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package INHRT;


############# Class : INHRT::Employee ##############

package INHRT::Employee;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( INHRT );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = $_[0];
    my $self = INHRTc::new_Employee(@_);
    bless $self, $pkg if defined($self);
}

*getTitle = *INHRTc::Employee_getTitle;
*getName = *INHRTc::Employee_getName;
*getPosition = *INHRTc::Employee_getPosition;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        INHRTc::delete_Employee($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    INHRTc::disown_Employee($self);
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    if (not $self->can($member_func)) {
        my $h = INHRTc::swig_get_attr_Employee($self);
        return $h->{$field} if $h;
    }
    return $self->$member_func;
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    if (not $self->can($member_func)) {
        my $h = INHRTc::swig_get_attr_Employee($self);
        return $h->{$field} = $newval if $h;
    }
    return $self->$member_func($newval);
}

############# Class : INHRT::Manager ##############

package INHRT::Manager;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( INHRT::Employee INHRT );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = $_[0];
    my $self = INHRTc::new_Manager(@_);
    bless $self, $pkg if defined($self);
}

*getPosition = *INHRTc::Manager_getPosition;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        INHRTc::delete_Manager($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    INHRTc::disown_Manager($self);
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    if (not $self->can($member_func)) {
        my $h = INHRTc::swig_get_attr_Manager($self);
        return $h->{$field} if $h;
    }
    return $self->$member_func;
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    if (not $self->can($member_func)) {
        my $h = INHRTc::swig_get_attr_Manager($self);
        return $h->{$field} = $newval if $h;
    }
    return $self->$member_func($newval);
}

############# Class : INHRT::EmployeeList ##############

package INHRT::EmployeeList;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( INHRT );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = INHRTc::new_EmployeeList(@_);
    bless $self, $pkg if defined($self);
}

*addEmployee = *INHRTc::EmployeeList_addEmployee;
*get_item = *INHRTc::EmployeeList_get_item;
sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        INHRTc::delete_EmployeeList($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package INHRT;

1;
