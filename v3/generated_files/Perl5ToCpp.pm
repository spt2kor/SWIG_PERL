# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

package Perl5ToCpp;
use base qw(Exporter);
use base qw(DynaLoader);
package Perl5ToCppc;
bootstrap Perl5ToCpp;
package Perl5ToCpp;
@EXPORT = qw();

# ---------- BASE METHODS -------------

package Perl5ToCpp;

sub TIEHASH {
    my ($classname,$obj) = @_;
    return bless $obj, $classname;
}

sub CLEAR { }

sub FIRSTKEY { }

sub NEXTKEY { }

sub FETCH {
    my ($self,$field) = @_;
    my $member_func = "swig_${field}_get";
    $self->$member_func();
}

sub STORE {
    my ($self,$field,$newval) = @_;
    my $member_func = "swig_${field}_set";
    $self->$member_func($newval);
}

sub this {
    my $ptr = shift;
    return tied(%$ptr);
}


# ------- FUNCTION WRAPPERS --------

package Perl5ToCpp;

*new_intp = *Perl5ToCppc::new_intp;
*copy_intp = *Perl5ToCppc::copy_intp;
*delete_intp = *Perl5ToCppc::delete_intp;
*intp_assign = *Perl5ToCppc::intp_assign;
*intp_value = *Perl5ToCppc::intp_value;
*new_double_p = *Perl5ToCppc::new_double_p;
*copy_double_p = *Perl5ToCppc::copy_double_p;
*delete_double_p = *Perl5ToCppc::delete_double_p;
*double_p_assign = *Perl5ToCppc::double_p_assign;
*double_p_value = *Perl5ToCppc::double_p_value;
*subtract = *Perl5ToCppc::subtract;
*divide = *Perl5ToCppc::divide;
*add = *Perl5ToCppc::add;
*addition = *Perl5ToCppc::addition;

############# Class : Perl5ToCpp::Add ##############

package Perl5ToCpp::Add;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Perl5ToCpp );
%OWNER = ();
%ITERATORS = ();
*swig_m_x_get = *Perl5ToCppc::Add_m_x_get;
*swig_m_x_set = *Perl5ToCppc::Add_m_x_set;
*swig_m_y_get = *Perl5ToCppc::Add_m_y_get;
*swig_m_y_set = *Perl5ToCppc::Add_m_y_set;
*swig_m_sum_get = *Perl5ToCppc::Add_m_sum_get;
*swig_m_sum_set = *Perl5ToCppc::Add_m_sum_set;
*add = *Perl5ToCppc::Add_add;
sub new {
    my $pkg = shift;
    my $self = Perl5ToCppc::new_Add(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Perl5ToCppc::delete_Add($self);
        delete $OWNER{$self};
    }
}

sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Perl5ToCpp::Callback ##############

package Perl5ToCpp::Callback;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Perl5ToCpp );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Perl5ToCppc::new_Callback(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Perl5ToCppc::delete_Callback($self);
        delete $OWNER{$self};
    }
}

*run = *Perl5ToCppc::Callback_run;
*baseName = *Perl5ToCppc::Callback_baseName;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Perl5ToCpp::Caller ##############

package Perl5ToCpp::Caller;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Perl5ToCpp );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Perl5ToCppc::new_Caller(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Perl5ToCppc::delete_Caller($self);
        delete $OWNER{$self};
    }
}

*delCallback = *Perl5ToCppc::Caller_delCallback;
*setCallback = *Perl5ToCppc::Caller_setCallback;
*call = *Perl5ToCppc::Caller_call;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Perl5ToCpp::StdLib ##############

package Perl5ToCpp::StdLib;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Perl5ToCpp );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Perl5ToCppc::new_StdLib(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Perl5ToCppc::delete_StdLib($self);
        delete $OWNER{$self};
    }
}

*run = *Perl5ToCppc::StdLib_run;
*baseName = *Perl5ToCppc::StdLib_baseName;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


############# Class : Perl5ToCpp::DStdLib ##############

package Perl5ToCpp::DStdLib;
use vars qw(@ISA %OWNER %ITERATORS %BLESSEDMEMBERS);
@ISA = qw( Perl5ToCpp::StdLib Perl5ToCpp );
%OWNER = ();
%ITERATORS = ();
sub new {
    my $pkg = shift;
    my $self = Perl5ToCppc::new_DStdLib(@_);
    bless $self, $pkg if defined($self);
}

sub DESTROY {
    return unless $_[0]->isa('HASH');
    my $self = tied(%{$_[0]});
    return unless defined $self;
    delete $ITERATORS{$self};
    if (exists $OWNER{$self}) {
        Perl5ToCppc::delete_DStdLib($self);
        delete $OWNER{$self};
    }
}

*delCallback = *Perl5ToCppc::DStdLib_delCallback;
*setCallback = *Perl5ToCppc::DStdLib_setCallback;
*call = *Perl5ToCppc::DStdLib_call;
sub DISOWN {
    my $self = shift;
    my $ptr = tied(%$self);
    delete $OWNER{$ptr};
}

sub ACQUIRE {
    my $self = shift;
    my $ptr = tied(%$self);
    $OWNER{$ptr} = 1;
}


# ------- VARIABLE STUBS --------

package Perl5ToCpp;

1;
